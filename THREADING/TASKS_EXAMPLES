////   
///  A task will by default use the Threadpool, which saves resources as creating threads can be expensive.
///  Task can return a result.There is no direct mechanism to return the result from thread.
/// We can chain tasks together to execute one after the other.
/// Establish a parent/child relationship when one task is started from another task.
/// Child task exception can propagate to parent task.
/// Task support cancellation through the use of cancellation tokens.
/// Asynchronous implementation is easy in task, using’ async’ and ‘await’ keywords.


private async void buttonDownload_Click(object sender, EventArgs e)     <<<<<<<<<<<<<<<<<<<<<<<<<<
{
    buttonDownload.Enabled = false;
    await Task.Run(() => {                     <<<<<<<<<<<<<<<<<<<<<<<<<<
        using (var client = new WebClient())
        {
            client.DownloadFile("http://example.com/file.mpeg", "file.mpeg");
        }
    })
    buttonDownload.Enabled = true;
}

/////////////////////////////////////////////////////////////////////////////////////////////


Thread:

int result = 0;
Thread thread = new System.Threading.Thread(() => { 
    result = 1; 
});
thread.Start();
thread.Join();
 


Task:

int result = await Task.Run(() => {      <<<<<<<<<<<<<<<<<<<<<<<<<<
    return 1; 
});
Console.WriteLine(result); //is 1

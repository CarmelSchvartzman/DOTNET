//  https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile
///  When you are reading data that is non-volatile, the executing thread may or may not always get the latest value. 
     If the object is volatile, the thread always gets the most up-to-date value.
// The volatile keyword indicates that a field might be modified by multiple threads that are executing at the same time. 
   The compiler, the runtime system, and even hardware may rearrange reads and writes to memory locations for performance reasons. 
   Fields that are declared volatile are not subject to these optimizations. 
   Adding the volatile modifier ensures that all threads will observe volatile writes performed by any other thread
   in the order in which they were performed. 
   
class Program
    {
        public volatile int i;
    }
    
// The volatile keyword is not a substitute for the lock keyword: 
//  IT helps you avoid data conflicts when you have multiple threads trying to access the same data.    
    
    
